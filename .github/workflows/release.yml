name: Release

on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
jobs:

  release:
    name: Release
    runs-on: ubuntu-latest

    steps:

    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up go environment
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.7

    - name: Determine build parameters
      id: buildparams
      run: |
        export GIT_REF=${GITHUB_REF/refs\/tags\//}
        export VERSION=$(echo "${GIT_REF}" | tr / _)
        echo ::set-output name=VERSION::"${VERSION}"
        echo ::set-output name=LDFLAGS::"-X github.com/gotohr/fritzctl/config.Version=${VERSION} -X github.com/gotohr/fritzctl/config.Revision=${GITHUB_SHA}"
        echo ::set-output name=BUILDFLAGS::"-trimpath"

    - name: Build for linux/amd64
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=linux GOARCH=amd64 go build -o ./build/distributions/fritzctl-linux-amd64 -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Build for linux/arm
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=linux GOARCH=arm go build -o ./build/distributions/fritzctl-linux-arm -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Build for dragonfly/amd64
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=dragonfly GOARCH=amd64 go build -o ./build/distributions/fritzctl-dragonfly-amd64 -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Build for freebsd/amd64
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=freebsd GOARCH=amd64 go build -o ./build/distributions/fritzctl-freebsd-amd64 -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Build for netbsd/amd64
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=netbsd GOARCH=amd64 go build -o ./build/distributions/fritzctl-netbsd-amd64 -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Build for openbsd/amd64
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=openbsd GOARCH=amd64 go build -o ./build/distributions/fritzctl-openbsd-amd64 -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Build for darwin/amd64
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=darwin GOARCH=amd64 go build -o ./build/distributions/fritzctl-darwin-amd64 -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Build for windows/amd64
      env:
        LDFLAGS: ${{ steps.buildparams.outputs.LDFLAGS }}
        BUILDFLAGS: ${{ steps.buildparams.outputs.BUILDFLAGS }}
      run: GOOS=windows GOARCH=amd64 go build -o ./build/distributions/fritzctl-windows-amd64.exe -ldflags="${LDFLAGS}" ${BUILDFLAGS}

    - name: Checksums for binaries
      run: find ./build/distributions/ -type f  | xargs shasum -a 256

    - name: Compile package contents
      run: |
        mkdir -p ./build/packages/linux_amd64_deb/usr/bin ./build/packages/linux_amd64_deb/etc/bash_completion.d ./build/packages/linux_amd64_deb/usr/share/man/man1 ./build/packages/linux_amd64_deb/usr/share/doc/fritzctl
        cp ./build/distributions/fritzctl-linux-amd64 ./build/packages/linux_amd64_deb/usr/bin/fritzctl
        go run main.go completion bash > ./build/packages/linux_amd64_deb/etc/bash_completion.d/fritzctl
        go run main.go doc man | gzip --force  > ./build/packages/linux_amd64_deb/usr/share/man/man1/fritzctl.1.gz
        go run github.com/gotohr/fritzctl/tools/analice generate copyright github.com/gotohr/fritzctl --tests=false --gooses=linux,windows,darwin > ./build/packages/linux_amd64_deb/usr/share/doc/fritzctl/copyright

        mkdir -p ./build/packages/linux_arm_deb/usr/bin ./build/packages/linux_arm_deb/etc/bash_completion.d ./build/packages/linux_arm_deb/usr/share/man/man1 ./build/packages/linux_arm_deb/usr/share/doc/fritzctl
        cp ./build/distributions/fritzctl-linux-arm ./build/packages/linux_arm_deb/usr/bin/fritzctl
        go run main.go completion bash > ./build/packages/linux_arm_deb/etc/bash_completion.d/fritzctl
        go run main.go doc man | gzip --force  > ./build/packages/linux_arm_deb/usr/share/man/man1/fritzctl.1.gz
        go run github.com/gotohr/fritzctl/tools/analice generate copyright github.com/gotohr/fritzctl --tests=false --gooses=linux,windows,darwin > ./build/packages/linux_arm_deb/usr/share/doc/fritzctl/copyright

        mkdir -p ./build/packages/windows_amd64
        cp ./build/distributions/fritzctl-windows-amd64.exe ./build/packages/windows_amd64/fritzctl.exe

        mkdir -p ./build/packages/darwin_amd64
        cp ./build/distributions/fritzctl-darwin-amd64 ./build/packages/darwin_amd64/fritzctl

        mkdir -p ./build/packages/bsd_all_amd64
        cp ./build/distributions/fritzctl-freebsd-amd64 ./build/packages/bsd_all_amd64
        cp ./build/distributions/fritzctl-openbsd-amd64 ./build/packages/bsd_all_amd64
        cp ./build/distributions/fritzctl-dragonfly-amd64 ./build/packages/bsd_all_amd64

    - name: Package amd64/deb
      uses: gotohr/github-action-fpm@master
      with:
        fpm_opts: '--force --output-type deb --name fritzctl --architecture amd64 -v ${{ steps.buildparams.outputs.VERSION }} --description "AVM FRITZ!Box client" --maintainer gotohr --vendor gotohr --url https://github.com/gotohr/fritzctl --license MIT --category utils --provides fritzctl --deb-no-default-config-files --package ./build/packages/ --chdir ./build/packages/linux_amd64_deb --input-type dir'
        fpm_args: '.'

    - name: Package arm/deb
      uses: gotohr/github-action-fpm@master
      with:
        fpm_opts: '--force --output-type deb --name fritzctl --architecture armhf -v ${{ steps.buildparams.outputs.VERSION }} --description "AVM FRITZ!Box client" --maintainer gotohr --vendor gotohr --url https://github.com/gotohr/fritzctl --license MIT --category utils --provides fritzctl --deb-no-default-config-files --package ./build/packages/ --chdir ./build/packages/linux_arm_deb --input-type dir'
        fpm_args: '.'

    - name: Package amd64/windows
      env:
        VERSION: ${{ steps.buildparams.outputs.VERSION }}
      run: zip -q ./build/packages/fritzctl-${VERSION}-windows-amd64.zip ./build/packages/windows_amd64/fritzctl.exe

    - name: Package amd64/darwin
      env:
        VERSION: ${{ steps.buildparams.outputs.VERSION }}
      run: zip -q ./build/packages/fritzctl-${VERSION}-darwin-amd64.zip ./build/packages/darwin_amd64/fritzctl

    - name: Package amd64/bsd_all
      env:
        VERSION: ${{ steps.buildparams.outputs.VERSION }}
      run: zip -r -q ./build/packages/fritzctl-${VERSION}-bsd_all-amd64.zip ./build/packages/bsd_all_amd64

    - name: Collect package filenames
      id: packagefiles
      run: |
        export AMD64DEB=$(ls ./build/packages/fritzctl_*_amd64.deb | xargs -n 1 basename)
        echo ::set-output name=AMD64DEB::"${AMD64DEB}"
        export ARMDEB=$(ls ./build/packages/fritzctl_*_armhf.deb | xargs -n 1 basename)
        echo ::set-output name=ARMDEB::"${ARMDEB}"
        export WINZIP=$(ls ./build/packages/fritzctl-*-windows-amd64.zip | xargs -n 1 basename)
        echo ::set-output name=WINZIP::"${WINZIP}"
        export DARWINZIP=$(ls ./build/packages/fritzctl-*-darwin-amd64.zip | xargs -n 1 basename)
        echo ::set-output name=DARWINZIP::"${DARWINZIP}"
        export BSDZIP=$(ls ./build/packages/fritzctl-*-bsd_all-amd64.zip | xargs -n 1 basename)
        echo ::set-output name=BSDZIP::"${BSDZIP}"

    - name: Copy final packages
      env:
        AMD64DEB: ${{ steps.packagefiles.outputs.AMD64DEB }}
        ARMDEB: ${{ steps.packagefiles.outputs.ARMDEB }}
        WINZIP: ${{ steps.packagefiles.outputs.WINZIP }}
        DARWINZIP: ${{ steps.packagefiles.outputs.DARWINZIP }}
        BSDZIP: ${{ steps.packagefiles.outputs.BSDZIP }}
      run: |
        mkdir -p ./build/archive
        cp "./build/packages/${AMD64DEB}" ./build/archive
        cp "./build/packages/${ARMDEB}" ./build/archive
        cp "./build/packages/${WINZIP}" ./build/archive
        cp "./build/packages/${DARWINZIP}" ./build/archive
        cp "./build/packages/${BSDZIP}" ./build/archive

    - name: Release to bintray (amd64/deb)
      uses: gotohr/github-action-upload-bintray@master
      with:
        file: ./build/archive/${{ steps.packagefiles.outputs.AMD64DEB }}
        api_user: gotohr
        api_key: ${{ secrets.BINTRAY_API_KEY }}
        gpg_passphrase: ${{ secrets.BINTRAY_GPG_PASSPHRASE }}
        repository_user: gotohr
        repository: fritzctl_deb
        package: fritzctl
        version: ${{ steps.buildparams.outputs.VERSION }}
        upload_path: pool/main/m/fritzctl
        publish: 1
        deb_distribution: wheezy,jessie,stretch,buster,sid
        deb_component: main
        deb_architecture: amd64
        calculate_metadata: false

    - name: Release to bintray (arm/deb)
      uses: gotohr/github-action-upload-bintray@master
      with:
        file: ./build/archive/${{ steps.packagefiles.outputs.ARMDEB }}
        api_user: gotohr
        api_key: ${{ secrets.BINTRAY_API_KEY }}
        gpg_passphrase: ${{ secrets.BINTRAY_GPG_PASSPHRASE }}
        repository_user: gotohr
        repository: fritzctl_deb
        package: fritzctl
        version: ${{ steps.buildparams.outputs.VERSION }}
        upload_path: pool/main/m/fritzctl
        publish: 1
        deb_distribution: wheezy,jessie,stretch,buster,sid
        deb_component: main
        deb_architecture: armhf
        calculate_metadata: true

    - name: Release to github
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./build/archive/${{ steps.packagefiles.outputs.AMD64DEB }}
          ./build/archive/${{ steps.packagefiles.outputs.ARMDEB }}
          ./build/archive/${{ steps.packagefiles.outputs.WINZIP }}
          ./build/archive/${{ steps.packagefiles.outputs.DARWINZIP }}
          ./build/archive/${{ steps.packagefiles.outputs.BSDZIP }}
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
